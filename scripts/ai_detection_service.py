from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from ai_detection_model import detect_ai_text
import logging
import time
import uvicorn

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = FastAPI(title="PortGenie AI Detection API", description="API for detecting AI-generated text")

class TextRequest(BaseModel):
    """Request model for text to analyze"""
    text: str
    threshold: float = 0.5

class DetectionResponse(BaseModel):
    """Response model for AI detection results"""
    probability: float
    is_ai_generated: bool
    processing_time: float

@app.post("/detect", response_model=DetectionResponse)
async def detect_text(request: TextRequest):
    """
    Analyze text to determine if it was generated by AI
    """
    if not request.text or len(request.text.strip()) < 50:
        raise HTTPException(status_code=400, detail="Text must be at least 50 characters long")
    
    start_time = time.time()
    
    try:
        logger.info(f"Processing text of length {len(request.text)}")
        result = detect_ai_text(request.text, threshold=request.threshold)
        
        processing_time = time.time() - start_time
        
        return {
            "probability": result["probability"],
            "is_ai_generated": result["is_ai_generated"],
            "processing_time": processing_time
        }
    except Exception as e:
        logger.error(f"Error processing text: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error processing text: {str(e)}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}

if __name__ == "__main__":
    logger.info("Starting AI Detection API service")
    uvicorn.run(app, host="0.0.0.0", port=8000) 