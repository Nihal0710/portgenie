"use client"

import React, { useState } from "react"
import { Radar, Bot, Loader2, AlertCircle, RefreshCw, CheckCircle, XCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { useToast } from "@/components/ui/use-toast"
import { AIDetectionResponse } from "@/lib/ai-detection"

export function AIDetector() {
  const [text, setText] = useState("")
  const [threshold, setThreshold] = useState(0.5)
  const [isLoading, setIsLoading] = useState(false)
  const [result, setResult] = useState<AIDetectionResponse | null>(null)
  const [error, setError] = useState<string | null>(null)
  const { toast } = useToast()

  const handleDetect = async () => {
    if (!text.trim() || text.trim().length < 50) {
      setError("Please enter at least 50 characters for accurate detection")
      return
    }

    setIsLoading(true)
    setError(null)
    
    try {
      const response = await fetch("/api/ai-detection", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ text, threshold }),
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "An error occurred during AI detection")
      }
      
      const data = await response.json()
      setResult(data)
    } catch (err: any) {
      console.error("AI detection error:", err)
      setError(err.message || "Failed to analyze text")
      toast({
        title: "Error",
        description: "Failed to analyze text. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleReset = () => {
    setText("")
    setResult(null)
    setError(null)
  }

  const getResultColor = () => {
    if (!result) return ""
    if (result.isAIGenerated) {
      if (result.probability > 0.9) return "text-red-500"
      if (result.probability > 0.7) return "text-amber-500"
      return "text-yellow-500"
    }
    return "text-green-500"
  }

  const getProgressColor = () => {
    if (!result) return "bg-gray-300"
    if (result.isAIGenerated) {
      if (result.probability > 0.9) return "bg-red-500"
      if (result.probability > 0.7) return "bg-amber-500"
      return "bg-yellow-500"
    }
    return "bg-green-500"
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Radar className="h-5 w-5 text-indigo-500" />
            <span>AI Content Detector</span>
          </CardTitle>
          <CardDescription>
            Analyze text to detect if it was generated by AI using our Hugging Face transformer model
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="text-input" className="text-sm font-medium">
              Text to analyze
            </label>
            <Textarea
              id="text-input"
              placeholder="Enter text to analyze (minimum 50 characters)..."
              className="h-40 resize-none"
              value={text}
              onChange={(e) => setText(e.target.value)}
              disabled={isLoading}
            />
            {error && (
              <div className="flex items-center gap-2 text-sm text-red-500">
                <AlertCircle className="h-4 w-4" />
                <span>{error}</span>
              </div>
            )}
            <div className="text-xs text-muted-foreground">
              {text.length} characters {text.length < 50 && "(minimum 50 required)"}
            </div>
          </div>
          
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label htmlFor="threshold" className="text-sm font-medium">
                Detection Threshold: {threshold.toFixed(2)}
              </label>
              <span className="text-xs text-muted-foreground">
                Higher = more strict
              </span>
            </div>
            <Slider
              id="threshold"
              min={0.1}
              max={0.9}
              step={0.05}
              value={[threshold]}
              onValueChange={(value) => setThreshold(value[0])}
              disabled={isLoading}
            />
          </div>
        </CardContent>
        <CardFooter className="flex items-center justify-between">
          <Button
            variant="outline"
            onClick={handleReset}
            disabled={isLoading || (!text && !result)}
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Reset
          </Button>
          <Button onClick={handleDetect} disabled={isLoading || text.length < 50}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Analyzing...
              </>
            ) : (
              <>
                <Bot className="mr-2 h-4 w-4" />
                Detect AI Content
              </>
            )}
          </Button>
        </CardFooter>
      </Card>

      {result && (
        <Card className="overflow-hidden">
          <div className={`h-2 ${getProgressColor()}`} style={{ width: `${result.probability * 100}%` }}></div>
          <CardHeader>
            <CardTitle className={`flex items-center gap-2 ${getResultColor()}`}>
              {result.isAIGenerated ? (
                <>
                  <Bot className="h-5 w-5" />
                  <span>AI-Generated Content Detected</span>
                </>
              ) : (
                <>
                  <CheckCircle className="h-5 w-5" />
                  <span>Likely Human-Written Content</span>
                </>
              )}
            </CardTitle>
            <CardDescription>
              {result.isAIGenerated 
                ? "This text has characteristics consistent with AI-generated content"
                : "This text appears to be written by a human"}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div>
                <div className="mb-1 flex items-center justify-between text-sm">
                  <span className="font-medium">AI Probability</span>
                  <span className={`font-bold ${getResultColor()}`}>
                    {(result.probability * 100).toFixed(1)}%
                  </span>
                </div>
                <Progress value={result.probability * 100} className={getProgressColor()} />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="rounded-lg border p-3">
                  <div className="text-sm font-medium">Confidence</div>
                  <div className={`text-lg font-bold ${getResultColor()}`}>
                    {result.confidence}
                  </div>
                </div>
                <div className="rounded-lg border p-3">
                  <div className="text-sm font-medium">Processing Time</div>
                  <div className="text-lg font-bold">
                    {result.processingTime}s
                  </div>
                </div>
              </div>
            </div>
            
            <div className="rounded-lg bg-gray-50 p-3 text-sm dark:bg-gray-900">
              <p className="font-medium mb-1">What does this mean?</p>
              {result.isAIGenerated ? (
                <p>
                  The AI detector found patterns consistent with AI-generated text with {result.confidence.toLowerCase()} confidence. 
                  This doesn't guarantee the text is AI-generated, but suggests it has characteristics of AI writing.
                </p>
              ) : (
                <p>
                  The AI detector found this text to be consistent with human writing patterns with {result.confidence.toLowerCase()} confidence. 
                  This suggests the content was likely written by a person rather than an AI.
                </p>
              )}
            </div>
          </CardContent>
          <CardFooter>
            <Button variant="outline" onClick={handleReset} className="w-full">
              <RefreshCw className="mr-2 h-4 w-4" />
              Analyze Another Text
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  )
} 